@model Ticketing.Data.TicketModel.ViewModels.EmailServerSettings
@Html.Partial("AdminHeader")

<!--Email Server Configuration Starts here-->

@using (Ajax.BeginForm("PostEmailServerSettings", "Admin", null,
new AjaxOptions
{

    HttpMethod = "POST",
    InsertionMode = InsertionMode.ReplaceWith,
    UpdateTargetId = "UserInfo",
    OnSuccess = "FadeOutUserInfo"
}
))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>EmailServerSettings</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.FromEmail)

        <div class="form-group">
            @Html.LabelFor(model => model.FromEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FromEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FromEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Host, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Host, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Host, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Port, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Port, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Port, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EnableSsl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.EnableSsl)
                    @Html.ValidationMessageFor(model => model.EnableSsl, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeliveryMethod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.DeliveryMethod, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DeliveryMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UseDefaultCredentials, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.UseDefaultCredentials)
                    @Html.ValidationMessageFor(model => model.UseDefaultCredentials, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>


    </div>
}

<!--Email Server Configuration ENDS here-->
<hr />
<!-- List of Email Contents (Subject, Body) Starts here-->
<div id="ListOfEmailContents" class="table-striped ">
    @if (Model.ToUserEmailContents != null)
    {
        //id="ListOfEmailContents"

        foreach (var item in Model.ToUserEmailContents)
        {
            using (Ajax.BeginForm("UpdateEmailContent", "Admin", null,
                  new AjaxOptions
                  {

                      HttpMethod = "POST",
                      OnSuccess = "FadeOutUserInfo",
                      InsertionMode = InsertionMode.InsertAfter,
                      UpdateTargetId = "UserInfo"
                  }
                  ))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal EmailContent">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="col-lg-12 mt-10" style="border-radius: 5px; border:1px solid #ccc; margin-bottom:20px; padding-top:10px;">
                        <div class="form-group">
                            @Html.LabelFor(x => item.EmailType, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(x => item.EmailType, null, "EmailType", new { htmlAttributes = new { @class = "form-control input-lg col-md-4" } })
                            @Html.ValidationMessageFor(x => item.EmailType, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => item.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => item.Subject, null,"Subject", new { htmlAttributes = new { @class = "form-control col-md-4" } })
                            @Html.ValidationMessageFor(model => item.Subject, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => item.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => item.Body, null, "Body", new { htmlAttributes = new { @class = "form-control  col-md-10 bigger", placeholder = "2.0", rows = 10 } })
                            @Html.ValidationMessageFor(model => item.Body, "", new { @class = "text-danger" })
                            <span data-toggle='tooltip' class="glyphicon glyphicon-exclamation-sign" data-placement="top" title='Use [LINK] as variable for link'></span>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save Changes" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </div>
            }<!--End of AJAX.Begin-->

        }<!--End of for loop-->


    }



</div>
<hr />
<!-- List Of Email Contents (Subject, Body) ENDS here-->
<!-- Add New Email Content (Subject, Body) Starts here-->
@using (Ajax.BeginForm("PostEmailContent", "Admin", null,
new AjaxOptions
{

    HttpMethod = "POST",
    InsertionMode = InsertionMode.InsertAfter,
    UpdateTargetId = "EmailContentEmptyElement",
    OnSuccess = "FadeOutUserInfo"
}
))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("Purpose of Email", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("EmailType", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessage("Can't be Empty", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Subject", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("Subject", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessage("Can't be Empty", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Email Body", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 email-body">
                @Html.TextArea("Body", new { htmlAttributes = new { @class = "form-control form-group-lg" }, rows = 7, cols = 50 })
                @Html.ValidationMessage("Can't be Empty", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>


}
<!-- Add New Email Content (Subject, Body) ENDS here-->

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
